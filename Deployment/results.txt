Help on function st_canvas in module streamlit_drawable_canvas:

st_canvas(
    fill_color: str = '#eee',
    stroke_width: int = 20,
    stroke_color: str = 'black',
    background_color: str = '',
    background_image: <module 'PIL.Image' from '/Users/shubham/miniconda3/envs/deeprazor/lib/python3.13/site-packages/PIL/Image.py'> = None,
    update_streamlit: bool = True,
    height: int = 400,
    width: int = 600,
    drawing_mode: str = 'freedraw',
    initial_drawing: dict = None,
    display_toolbar: bool = True,
    point_display_radius: int = 3,
    key=None
) -> streamlit_drawable_canvas.CanvasResult
    Create a drawing canvas in Streamlit app. Retrieve the RGBA image data into a 4D numpy array (r, g, b, alpha)
    on mouse up event.

    Parameters
    ----------
    fill_color: str
        Color of fill for Rect in CSS color property. Defaults to "#eee".
    stroke_width: str
        Width of drawing brush in CSS color property. Defaults to 20.
    stroke_color: str
        Color of drawing brush in hex. Defaults to "black".
    background_color: str
        Color of canvas background in CSS color property. Defaults to "" which is transparent.
        Overriden by background_image.
        Note: Changing background_color will reset the drawing.
    background_image: Image
        Pillow Image to display behind canvas.
        Automatically resized to canvas dimensions.
        Being behind the canvas, it is not sent back to Streamlit on mouse event.
    update_streamlit: bool
        Whenever True, send canvas data to Streamlit when object/selection is updated or mouse up.
    height: int
        Height of canvas in pixels. Defaults to 400.
    width: int
        Width of canvas in pixels. Defaults to 600.
    drawing_mode: {'freedraw', 'transform', 'line', 'rect', 'circle', 'point', 'polygon'}
        Enable free drawing when "freedraw", object manipulation when "transform", "line", "rect", "circle", "point", "polygon".
        Defaults to "freedraw".
    initial_drawing: dict
        Redraw canvas with given initial_drawing. If changed to None then empties canvas.
        Should generally be the `json_data` output from other canvas, which you can manipulate.
        Beware: if importing from a bigger/smaller canvas, no rescaling is done in the canvas,
        it should be ran on user's side.
    display_toolbar: bool
        Display the undo/redo/reset toolbar.
    point_display_radius: int
        The radius to use when displaying point objects. Defaults to 3.
    key: str
        An optional string to use as the unique key for the widget.
        Assign a key so the component is not remount every time the script is rerun.

    Returns
    -------
    result: CanvasResult
        `image_data` contains reshaped RGBA image 4D numpy array (r, g, b, alpha),
        `json_data` stores the canvas/objects JSON representation which you can manipulate, store
        load and then reinject into another canvas through the `initial_drawing` argument.

{
 'version': '4.4.0', 
 'objects': 
 {'type': 'path', 
 'version': '4.4.0', 
 'originX': 'left', 
 'originY': 'top', 
 'left': 235.5, 
 'top': 246.5, 
 'width': 13, 
 'height': 175.01, 
 'fill': None, 
 'stroke': '#ffffff', 
 'strokeWidth': 3, 
 'strokeDashArray': None, 
 'strokeLineCap': 'round', 
 'strokeDashOffset': 0, 
 'strokeLineJoin': 'round', 
 'strokeUniform': False, 
 'strokeMiterLimit': 10,
 'scaleX': 1, 
 'scaleY': 1, 
 'angle': 0, 
 'flipX': False, 
 'flipY': False, 
 'opacity': 1, 
 'shadow': None, 
 'visible': True, 
 'backgroundColor': '', 
 'fillRule': 'nonzero', 
 'paintFirst': 'fill', 
 'globalCompositeOperation': 'source-over', 
 'skewX': 0, 'skewY': 0, 
 'path': [['M', 250, 247.997], ['Q', 250, 248, 250, 249.5], ['Q', 250, 251, 250, 255.5], ['Q', 250, 260, 250, 265], ['Q', 250, 270, 250, 276], ['Q', 250, 282, 250, 288.5], ['Q', 250, 295, 250, 301.5], ['Q', 250, 308, 250, 314], ['Q', 250, 320, 249.5, 326.5], ['Q', 249, 333, 248.5, 337], ['Q', 248, 341, 248, 344], ['Q', 248, 347, 247.5, 349.5], ['Q', 247, 352, 247, 354], ['Q', 247, 356, 247, 358.5], ['Q', 247, 361, 246, 364.5], ['Q', 245, 368, 244.5, 371], ['Q', 244, 374, 243, 377.5], ['Q', 242, 381, 241.5, 385], ['Q', 241, 389, 240, 393.5], ['Q', 239, 398, 239, 401.5], ['Q', 239, 405, 238.5, 407.5], ['Q', 238, 410, 238, 412], ['Q', 238, 414, 237.5, 415.5], ['Q', 237, 417, 237, 418.5], ['Q', 237, 420, 237, 421], ['Q', 237, 422, 237, 422.5], ['L', 237, 423.003]]}, 
}